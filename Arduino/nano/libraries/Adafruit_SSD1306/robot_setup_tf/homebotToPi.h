// Generated by gencpp from file robot_setup_tf/homebotToPi.msg
// DO NOT EDIT!


#ifndef ROBOT_SETUP_TF_MESSAGE_HOMEBOTTOPI_H
#define ROBOT_SETUP_TF_MESSAGE_HOMEBOTTOPI_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_setup_tf
{
template <class ContainerAllocator>
struct homebotToPi_
{
  typedef homebotToPi_<ContainerAllocator> Type;

  homebotToPi_()
    : arduino_micros(0)
    , integrated_X(0.0)
    , integrated_Y(0.0)
    , X_rate(0.0)
    , Y_rate(0.0)
    , yaw_IMU(0.0)
    , yaw_encoders(0.0)
    , yaw_rate_IMU(0.0)
    , yaw_rate_encoders(0.0)
    , diag1(0.0)
    , diag2(0.0)
    , diag3(0.0)  {
    }
  homebotToPi_(const ContainerAllocator& _alloc)
    : arduino_micros(0)
    , integrated_X(0.0)
    , integrated_Y(0.0)
    , X_rate(0.0)
    , Y_rate(0.0)
    , yaw_IMU(0.0)
    , yaw_encoders(0.0)
    , yaw_rate_IMU(0.0)
    , yaw_rate_encoders(0.0)
    , diag1(0.0)
    , diag2(0.0)
    , diag3(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _arduino_micros_type;
  _arduino_micros_type arduino_micros;

   typedef float _integrated_X_type;
  _integrated_X_type integrated_X;

   typedef float _integrated_Y_type;
  _integrated_Y_type integrated_Y;

   typedef float _X_rate_type;
  _X_rate_type X_rate;

   typedef float _Y_rate_type;
  _Y_rate_type Y_rate;

   typedef float _yaw_IMU_type;
  _yaw_IMU_type yaw_IMU;

   typedef float _yaw_encoders_type;
  _yaw_encoders_type yaw_encoders;

   typedef float _yaw_rate_IMU_type;
  _yaw_rate_IMU_type yaw_rate_IMU;

   typedef float _yaw_rate_encoders_type;
  _yaw_rate_encoders_type yaw_rate_encoders;

   typedef float _diag1_type;
  _diag1_type diag1;

   typedef float _diag2_type;
  _diag2_type diag2;

   typedef float _diag3_type;
  _diag3_type diag3;





  typedef boost::shared_ptr< ::robot_setup_tf::homebotToPi_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_setup_tf::homebotToPi_<ContainerAllocator> const> ConstPtr;

}; // struct homebotToPi_

typedef ::robot_setup_tf::homebotToPi_<std::allocator<void> > homebotToPi;

typedef boost::shared_ptr< ::robot_setup_tf::homebotToPi > homebotToPiPtr;
typedef boost::shared_ptr< ::robot_setup_tf::homebotToPi const> homebotToPiConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_setup_tf::homebotToPi_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_setup_tf::homebotToPi_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_setup_tf::homebotToPi_<ContainerAllocator1> & lhs, const ::robot_setup_tf::homebotToPi_<ContainerAllocator2> & rhs)
{
  return lhs.arduino_micros == rhs.arduino_micros &&
    lhs.integrated_X == rhs.integrated_X &&
    lhs.integrated_Y == rhs.integrated_Y &&
    lhs.X_rate == rhs.X_rate &&
    lhs.Y_rate == rhs.Y_rate &&
    lhs.yaw_IMU == rhs.yaw_IMU &&
    lhs.yaw_encoders == rhs.yaw_encoders &&
    lhs.yaw_rate_IMU == rhs.yaw_rate_IMU &&
    lhs.yaw_rate_encoders == rhs.yaw_rate_encoders &&
    lhs.diag1 == rhs.diag1 &&
    lhs.diag2 == rhs.diag2 &&
    lhs.diag3 == rhs.diag3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_setup_tf::homebotToPi_<ContainerAllocator1> & lhs, const ::robot_setup_tf::homebotToPi_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_setup_tf

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_setup_tf::homebotToPi_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_setup_tf::homebotToPi_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_setup_tf::homebotToPi_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_setup_tf::homebotToPi_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_setup_tf::homebotToPi_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_setup_tf::homebotToPi_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_setup_tf::homebotToPi_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b5b22ee234771afe1c3cd055948ca773";
  }

  static const char* value(const ::robot_setup_tf::homebotToPi_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb5b22ee234771afeULL;
  static const uint64_t static_value2 = 0x1c3cd055948ca773ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_setup_tf::homebotToPi_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_setup_tf/homebotToPi";
  }

  static const char* value(const ::robot_setup_tf::homebotToPi_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_setup_tf::homebotToPi_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32  arduino_micros  \n"
"float32 integrated_X\n"
"float32 integrated_Y\n"
"float32 X_rate\n"
"float32 Y_rate\n"
"float32 yaw_IMU\n"
"float32 yaw_encoders\n"
"float32 yaw_rate_IMU\n"
"float32 yaw_rate_encoders\n"
"float32 diag1\n"
"float32 diag2\n"
"float32 diag3\n"
;
  }

  static const char* value(const ::robot_setup_tf::homebotToPi_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_setup_tf::homebotToPi_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.arduino_micros);
      stream.next(m.integrated_X);
      stream.next(m.integrated_Y);
      stream.next(m.X_rate);
      stream.next(m.Y_rate);
      stream.next(m.yaw_IMU);
      stream.next(m.yaw_encoders);
      stream.next(m.yaw_rate_IMU);
      stream.next(m.yaw_rate_encoders);
      stream.next(m.diag1);
      stream.next(m.diag2);
      stream.next(m.diag3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct homebotToPi_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_setup_tf::homebotToPi_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_setup_tf::homebotToPi_<ContainerAllocator>& v)
  {
    s << indent << "arduino_micros: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.arduino_micros);
    s << indent << "integrated_X: ";
    Printer<float>::stream(s, indent + "  ", v.integrated_X);
    s << indent << "integrated_Y: ";
    Printer<float>::stream(s, indent + "  ", v.integrated_Y);
    s << indent << "X_rate: ";
    Printer<float>::stream(s, indent + "  ", v.X_rate);
    s << indent << "Y_rate: ";
    Printer<float>::stream(s, indent + "  ", v.Y_rate);
    s << indent << "yaw_IMU: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_IMU);
    s << indent << "yaw_encoders: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_encoders);
    s << indent << "yaw_rate_IMU: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_rate_IMU);
    s << indent << "yaw_rate_encoders: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_rate_encoders);
    s << indent << "diag1: ";
    Printer<float>::stream(s, indent + "  ", v.diag1);
    s << indent << "diag2: ";
    Printer<float>::stream(s, indent + "  ", v.diag2);
    s << indent << "diag3: ";
    Printer<float>::stream(s, indent + "  ", v.diag3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_SETUP_TF_MESSAGE_HOMEBOTTOPI_H
